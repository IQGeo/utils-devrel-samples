{
    "fireFeatureEvents": "Async: false\n\nFires events to update the display and other parts of the application when features have changed. This triggers 'featureCollection-modified' events for relevant feature types: routes, equipment, conduits, cables, circuits, and a specific structure type.\n\nParameters:\n- `aspect` (String): - An aspect describing the context of the update.\n- `structFeatureType` (String): - Optional. A specific structure feature type to fire an event for if structures are in separate layers.",
    "structContent": "Async: true\n\nThe equipment, cables etc housed within (or connected to) 'struct' Returns a StructContent",
    "getStructuresAtCoords": "Async: true\n\nGets the structure at each given a coordinate array. For each coordinate, finds a structure at that location and returns an array containing the structure (or returns 0 if none found) for each coordinate.\n\nParameters:\n- `coords` (Array<Array<Number>>): - An array of coordinates [lon, lat].\n- `featureTypes` (Array<String>): - Optional list of feature types to limit the search.\n\nReturns:\n- (Promise<Array<Feature|null>>): promise that resolves to an array of structures.",
    "getStructureAt": "Async: true\n\nGets a single structure at the given coordinate (or empty array if none found). If multiple structures are found, one is returned at random.\n\nParameters:\n- `coord` (Array<Number>): - The coordinate [lon, lat].\n- `featureTypes` (Array<String>): - Optional list of feature types to limit the search.\n\nReturns:\n- (Promise<Feature|0>): promise that resolves to the found structure or 0.",
    "getStructuresAt": "Async: true\n\nGets all structures at the given coordinate (or empty array if none found). Searches within a specified tolerance radius (in meters) around the coordinate and returns all matching structures.\n\nParameters:\n- `coord` (Array<Number>): - The coordinate [lon, lat].\n- `featureTypes` (Array<String>): - Optional list of feature types to limit the search.\n- `tolerance` (Number): - The search radius in meters.\n\nReturns:\n- (Promise<Array<Feature>>): promise that resolves to an array of found structures.",
    "routeContent": "Async: true\n\nGets the cables and conduits housed within a route. Calls the comms API to retrieve the route content, then returns an instance of `RouteContents`.\n\nParameters:\n- `route` (MywFeature): - The route feature.\n- `includeProposed` (Boolean): - Whether to include proposed items.\n\nReturns:\n- (Promise<RouteContents>): promise that resolves to the route content.",
    "validateRoutesForConduit": "Async: false\n\nValidates whether the given routes can contain the specified conduit. Checks each route type against the housings configured for the conduit.\n\nParameters:\n- `routes` (Array<MywFeature>): - The routes to validate.\n- `conduit` (MywFeature): - The conduit feature to check compatibility with.\n\nReturns:\n- (Boolean): if invalid routes exist; `false` if all are valid.",
    "isStructure": "Async: false\n\nChecks if the specified feature is a structure. A feature is considered a structure if its type is configured in `myw.config['mywcom.structures']`.\n\nParameters:\n- `feature` (MywFeature): - The feature to check.\n\nReturns:\n- (Boolean): if the feature is a structure; otherwise, `false`.",
    "isRoute": "Async: false\n\nChecks if the specified feature is a route. A feature is considered a route if its type is configured in `myw.config['mywcom.routes']`.\n\nParameters:\n- `feature` (MywFeature): - The feature to check.\n\nReturns:\n- (Boolean): if the feature is a route; otherwise, `false`.",
    "isConduit": "Async: false\n\nChecks if the specified feature is a conduit type. A feature is considered a conduit if its type is configured in `myw.config['mywcom.conduitâ€™]`.\n\nParameters:\n- `feature` (MywFeature): - The feature to check.\n\nReturns:\n- (Boolean): if the feature is a conduit; otherwise, `false`.",
    "fixRouteEnds": "Async: true\n\nUpdates the start and end points of the given route so that it begins at struct1 and ends at struct2. This method recalculates the route geometry to connect to the new structures, splits the existing geometry at the nearest points, and adjusts the coordinates accordingly. It then updates the route and corresponding conduits to reflect the new geometry. **Note:** This is an advanced operation that may produce invalid data if used incorrectly. Use only for specialized data editing tasks.\n\nParameters:\n- `route` (MywFeature): - The route feature to update.\n- `struct1` (MywFeature): - The structure feature to set as the new starting point.\n- `struct2` (MywFeature): - The structure feature to set as the new ending point.\n\nReturns:\n- (Promise): promise resolving when the route and related features are updated.",
    "houseInStructure": "Async: true\n\nTransfers equipment, routes, segments, and other contained items that overlap with the specified structure so that they are housed within it.\n\nParameters:\n- `toStructure` (MywFeature): - The structure that will receive the features.\n\nReturns:\n- (Promise): promise resolving when the operation is complete.",
    "transferToStructure": "Async: true\n\nTransfers equipment, routes, segments, and other contained items from one structure to another. Moves all assets housed in one structure into another structure.\n\nParameters:\n- `fromStructure` (MywFeature): - The structure from which contents will be moved.\n- `toStructure` (MywFeature): - The structure that will receive the contents.\n\nReturns:\n- (Promise): promise resolving when the transfer is complete.",

    "getStructuresAtCoords_desc": "Select one or more coordinates by clicking on a feature in the map then click `Execute`.\nThe function call and its output (the list of structures in the given coordinates) will be shown in the browser's development console.",
    "isStructure_desc": "Select a feature by clicking on it in the map then click `Execute`.\nThe function call and its output (true if the selected feature is a Structure, false otherwise) will be shown in the browser's development console."
}
