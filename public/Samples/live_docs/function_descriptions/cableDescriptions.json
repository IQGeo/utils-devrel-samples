{
    "highestUsedPinOn": "Async: true\n\nReturns the highest pin number currently used on the given cable. Useful for determining whether increasing the pin count would affect existing connections.\n\nParameters:\n- `cable` (MywFeature): The cable feature to evaluate\n\nReturns:\n- (Promise<number>): highest pin number in use",
    "connectionsFor": "Async: true\n\nGets all connection records for the given cable. Can optionally filter by splice type and return results sorted.\n\nParameters:\n- `cable` (MywFeature): The cable feature whose connections to retrieve\n- `splice` (boolean): If 'true', return only splice connections\n- `sorted` (boolean): If 'true', return the connections sorted\n\nReturns:\n- (Promise<MywFeature[]>): of connection features",
    "internalSegments": "Async: true\n\nRetrieves all cable segments housed within the specified feature.\n\nParameters:\n- `housingFeature` (MywFeature): The structure or housing feature\n- `root` (boolean): If 'true', fetches segments where this feature is the root housing\n\nReturns:\n- (Promise<MywFeature[]): An object containing the list of internal segments",
    "createDetachedInternalSeg": "Async: true\n\nCreates a detached internal segment within the given structure. The segment represents a cable path inside the structure and is linked to the cable. It is important to note that a detached segment, once created has NOT been inserted in the database yet.\n\nParameters:\n- `struct` (MywFeature): The structure in which the segment will be created\n- `cable` (MywFeature): The cable to which the segment belongs\n- `housingUrn` (string): The URN of the housing feature or a transaction placeholder\n- `length` (number|null): Optional length of the segment\n\nReturns:\n- (Promise<MywFeature>): newly created detached segment",
    "createDetachedSlack": "Async: true\n\nCreates a detached slack feature for the given cable within a specified housing. This function initializes a new slack (e.g., fiber slack) associated with a cable and a housing structure. It is important to note that a detached segment, once created has NOT been inserted in the database yet.\n\nParameters:\n- `cableFeature` (MywFeature): The cable feature for which to create slack\n- `housingFeature` (MywFeature): The structure housing the slack\n\nReturns:\n- (Promise<MywFeature>): detached slack feature",
    "splitSlack": "Async: true\n\nSplits an existing slack feature into two parts by dividing its length. The function creates a new slack segment from the given slack feature by cutting it at the specified length. Returns both the updated original slack and the newly created one.\n\nParameters:\n- `slack` (MywFeature): The existing slack feature to split\n- `length` (number): The length to assign to the new slack segment\n\nReturns:\n- (Promise<[MywFeature, MywFeature]>): array containing: [0] The updated original slack [1] The newly created slack feature",
    "createDetSlackAtSide": "Async: true\n\nCreates a detached slack feature associated with a cable segment. This function generates a new slack positioned relative to the given cable segment. It attaches metadata (`slackDetails`) indicating which segment and which side (before or after) the slack should appear. It is important to note that a detached segment, once create has NOT been inserted in the database yet.\n\nParameters:\n- `seg` (MywFeature): The existing cable segment to associate the slack with\n- `struct` (MywFeature): The structure that will house the slack\n- `side` (boolean): 'true' if the slack should be created before the segment; false' for after\n\nReturns:\n- (Promise<MywFeature>): newly created detached slack feature",
    "addSlack": "Async: true\n\nInserts a previously created detached slack into the database, attaching it to the specified cable segment at a specific side.\n\nParameters:\n- `featureType` (string): The type of the slack feature (e.g., 'mywcom_slack_fiber')\n- `detSlack` (MywFeature): The detached slack feature to insert\n- `segUrn` (string): The URN of the cable segment to attach the slack to\n- `side` (boolean): 'true' if the slack is inserted before the segment; false' for after\n\nReturns:\n- (Promise<string>): ID of the inserted slack feature",
    "transferConnections": "Async: true\n\nTransfers connections from one cable segment to another on the specified side. This function identifies all connections on `oldSeg` that match the specified `side` (\"in\" or \"out\") and updates them to reference `newSeg`. The returned array includes all updated connection features, which should be committed to a transaction. It's important to note that the changes are NOT pushed into the databse.\n\nParameters:\n- `oldSeg` (string): The URN of the original cable segment with existing connections\n- `newSeg` (string): The URN of the new cable segment to transfer connections to\n- `side` (string): The side of the segment to update (\"in\" or \"out\")\n\nReturns:\n- (Promise<MywFeature[]>): array of updated connection features ENH: Move to connectionManagerPlugin",
    "connectionsOf": "Async: true\n\nRetrieves all connection records associated with a given feature URN. Includes records where the feature is the `in_object`, `out_object`, or appears in the specified `housing_field`. Optionally filters by splice.\n\nParameters:\n- `featureURN` (MywFeature): URN of the feature to query connections for\n- `housing_field` (string): Field to use for housing match\n- `splices` (boolean): Optional splice value to limit results\n\nReturns:\n- (Promise<MywFeature[]>): resolving to array of connection features ENH: move to ConnectionManagerPlugin",
    "segmentContainment": "Async: true\n\nReturns the URN of the equipment in which the specified side of the cable segment is housed (if any). NOTE: Equipment connections must be manually set. Refer to the \"Setting an Enclosure on a cable\" section in the Developer Guide for more details.\n\nParameters:\n- `seg` (MywFeature): The cable segment to check\n- `side` (string): Which side of the segment to check ('in' or 'out')\n\nReturns:\n- (string|null): URN of the equipment, or null if not set",
    "setSegmentContainment": "Async: true\n\nSets the equipment housing for the specified side of a cable segment. Also updates the adjacent segment on the opposite side to ensure consistent containment. If `equip` is `null`, the containment is removed.\n\nParameters:\n- `seg` (MywFeature): The cable segment whose containment is being updated\n- `side` (string): The side of the segment to update ('in' or 'out')\n- `equip` (MywFeature|null): The equipment feature that houses the segment, or `null` to unset\n\nReturns:\n- (Promise<void>): ",
    "_setSegmentContainment": "Async: true\n\nSets the equipment housing for the specified side of a cable segment. Also updates the adjacent segment on the opposite side to ensure consistent containment. If `equip` is `null`, the containment is removed.\n\nParameters:\n- `seg` (MywFeature): The cable segment whose containment is being updated\n- `side` (string): The side of the segment to update ('in' or 'out')\n- `equip` (MywFeature|null): The equipment feature that houses the segment, or `null` to unset\n\nReturns:\n- (Promise<MywFeature>): updated segment feature",
    "setTickMark": "Async: true\n\nSets a tick mark on the specified side of a cable segment and updates adjacent segments accordingly. The function updates the tick mark on the target segment, as well as on its immediate upstream or downstream neighbor, depending on whether the tick is applied to the 'in_tick' or 'out_tick' side. It also traces connected segments to recalculate measured lengths based on the provided spacing and unit.\n\nParameters:\n- `seg` (MywFeature): The cable segment to update\n- `tickMark` (number): The new tick mark value\n- `field` (string): Specifies whether to update the 'in_tick' or 'out_tick' side of the segment\n- `spacing` (number): The spacing between tick marks, in the specified unit\n- `unit` (String): The unit of measurement for the spacing (e.g., \"m\" or \"ft\")\n\nReturns:\n- (Promise<void>): ",
    "setInTickMark": "Async: true\n\nSets the `in_tick` value on the given segment and adjusts the measured lengths of downstream segments up to the next tick. Computes the total tick distance and adjusts measured lengths of all segments between the current one and the next ticked segment.\n\nParameters:\n- `trans` (Transaction): The active database transaction to include updates in\n- `seg` (MywFeature): The cable segment where the tick is being set\n- `tickMark` (number): The new `in_tick` value to assign\n- `spacing` (number): The distance between tick marks\n- `unit` (string): Unit of measurement for spacing (e.g., \"m\", \"ft\")\n\nReturns:\n- (number|undefined): tick value of the next downstream segment if found; otherwise 'undefined'",
    "findDownstreamSegsToTick": "Async: true\n\nFinds all segments downstream from the given segment until a tick mark is encountered. Starts at the provided segment and follows the out_segment reference. If a tick mark is found on the out_tick of the current segment or the in_tick of the next segment, the traversal stops.\n\nParameters:\n- `seg` (MywFeature): The starting segment\n\nReturns:\n- ([Array<MywFeature>, number|null]): array of segments and the first tick mark found",
    "setOutTickMark": "Async: true\n\nSets the out tick mark of a segment and adjusts the measured lengths of all upstream segments until the next tick mark is encountered. This function starts from the provided segment and traverses upstream to find the next tick mark. It then updates the measured lengths of the segments between the two tick marks based on the given spacing and unit.\n\nParameters:\n- `trans` (Transaction): The transaction to batch updates into\n- `seg` (MywFeature): The cable segment to update\n- `tickMark` (number): The tick mark value to set\n- `spacing` (number): The distance between tick marks\n- `unit` (string): The unit of measurement (e.g. \"m\" or \"ft\")\n\nReturns:\n- (number|undefined): tick mark found upstream or undefined if none found",
    "findUpstreamSegsToTick": "Async: true\n\nFinds all upstream segments from the given segment up to the next tick mark. Traverses the cable network upstream starting from the given segment until it finds a segment with an `in_tick` or `out_tick` set. Returns all visited segments and the tick mark value found.\n\nParameters:\n- `seg` (MywFeature): The segment to start from\n\nReturns:\n- ([Array<MywFeature>, number|null]): array of upstream segments and the first tick mark found, or 'null' if none found",
    "_setTickMarkNull": "Async: true\n\nClears the tick mark field on the given segment, and clears the corresponding adjacent field on the neighboring segment.\n\nParameters:\n- `trans` (Transaction): The transaction to batch updates\n- `seg` (MywFeature): The segment to clear the tick mark from\n- `field` (string): Either `in_tick` or `out_tick`",
    "computeTickDist": "Async: false\n\nCalculates the physical distance in meters between two tick marks on a cable segment. Converts tick spacing from meters to the given unit, then computes the scaled distance between the two tick marks. Returns the result in meters.\n\nParameters:\n- `segTick` (number): The tick mark on the segment\n- `tick` (number): The target tick mark\n- `spacing` (number): The distance between each tick mark, in meters\n- `unit` (string): The unit in which tick spacing is expressed (e.g., \"m\", \"ft\")\n\nReturns:\n- (number): in meters between the two tick marks",
    "adjustMeasuredLengths": "Async: true\n\nAdjusts measured lengths of cable segments based on the given tick distance.\n\nParameters:\n- `trans` (Transaction): The transaction object used to batch updates\n- `segs` (Array<MywFeature>): An array of cable segment features to adjust\n- `tickDist` (number): The target distance (in meters) between tick marks\n\nReturns:\n- (Array<MywFeature>): updated cable segments",
    "_assertEndSegValid": "Async: true\n\nValidates the end segment tick marks. If either inTick or outTick is missing, it finds the next tick mark upstream or downstream and verifies that the current tickMark does not overlap with existing ticks.\n\nParameters:\n- `seg` (MywFeature): The cable segment to validate\n- `tickMark` (number): The tick mark being set on this segment\n- `inTick` (number): The tick mark at the 'in' side of the segment\n- `outTick` (number): The tick mark at the 'out' side of the segment",
    "_assertTickMarkValid": "Async: false\n\nThrow error if `tickMark` overlaps next tick mark\n\nParameters:\n- `tickMark` (number): The tick mark value to validate\n- `inTick` (number): The tick mark at the 'in' side of the segment\n- `outTick` (number): The tick mark at the 'out' side of the segment",
    "routeCables": "Async: true\n\nIterates over an array of cables and routes the cables using the given structures. Once the cables are routed, they are matched with the correct housing and updated.\n\nParameters:\n- `cablesJson` (Array<GeoJSON>): Array of cable data\n- `structures` (Array<MywFeature>): Array of structure features\n- `parentFeatures` (Array<MywFeature>): Features that the created cable segments will be housed in\n\nReturns:\n- (Array<MywFeature>): cable features",
    "_throwError": "Async: false\n\nThrow 'overlapping_tick' error",
    "_segHasTick": "Async: false\n\nReturns true if seg has a tick value set on the specified field\n\nParameters:\n- `seg` (MywFeature): Cable segment\n- `field` (string): `in_tick` or `out_tick`\n\nReturns:\n- (boolean): if tick exists, otherwise 'false'",
    "cutCableAt": "Async: true\n\nCuts a cable at a given segment within a structure. Creates new separate cables if needed.\n\nParameters:\n- `struct` (MywFeature): Structure where the cut occurs\n- `segment` (MywFeature): Segment to cut\n- `forward` (boolean): 'true' if cut forward, else 'false'\n- `spliceHousing` (MywFeature): Optional housing for splice\n\nReturns:\n- (Object): of the cutCable operation",
    "isCable": "Async: false\n\nReturns 'true' if a feature is a cable\n\nParameters:\n- `feature` (MywFeature): Feature to check\n\nReturns:\n- (boolean): if feature is a cable",
    "isInternal": "Async: true\n\nReturns 'true' if all segments of a cable are internal. Detached cables or cables crossing structures are considered not internal.\n\nParameters:\n- `cable` (MywFeature): Cable feature to check\n\nReturns:\n- (boolean): if all segments are internal",
    "fireFeatureEvents": "Async: false\n\nFires events to update the display and other parts of the application when features have changed. This triggers 'featureCollection-modified' events for relevant feature types: routes, equipment, conduits, cables, circuits, and a specific structure type.\n\nParameters:\n- `aspect` (string): An aspect describing the context of the update\n- `cableFeatureType` (string): Optional. A specific structure feature type to fire an event for if structures are in separate layers",
    "rootHousingUrnOf": "Async: false\n\nReturns the URN of the root housing of the given housing feature.\n\nParameters:\n- `housing` (RouteMixin|Conduit): The housing feature\n\nReturns:\n- (string): URN of the root housing, or the housing URN if no root housing is set",
    "getLength": "Async: false\n\nReturns the geographic length of a LineString feature.\n\nParameters:\n- `feature` (GeoJSON.Feature): The LineString feature\n\nReturns:\n- (number): length of the feature",
    "segmentTypeForCable": "Async: false\n\nReturns the segment feature type for the given cable.\n\nParameters:\n- `cable` (MywFeature): The cable feature\n\nReturns:\n- (string): segment feature type associated with the cable",
    "slackTypeForCable": "Async: false\n\nReturns the slack feature type for the given cable.\n\nParameters:\n- `cable` (MywFeature): The cable feature\n\nReturns:\n- (string): slack feature type associated with the cable",
    "slackTypeForSegment": "Async: false\n\nReturns the slack feature type for the given segment.\n\nParameters:\n- `segment` (MywFeature): The segment feature\n\nReturns:\n- (string|undefined): slack feature type associated with the segment, or undefined if not found",
    "isSegment": "Async: false\n\nDetermines if the given URN corresponds to a segment feature.\n\nParameters:\n- `urn` (string): The URN string\n\nReturns:\n- (boolean): if the URN corresponds to a segment feature, 'false' otherwise",
    "pinCountFor": "Async: true\n\nReturns pin count for a feature and on side if specified and appropriate\n\nParameters:\n- `feature` (MywFeature): The feature to get the pin count for\n- `side` (string): Optional. The side ('in' or 'out') to get pins for\n\nReturns:\n- (number|undefined): pin count or undefined if not found",
    "moveCableOnConnect": "Async: true\n\nShortens a cable segment and moves its endpoint to the equipment's offset geometry.\n\nParameters:\n- `connRec` (MywFeature): Connection record containing cable and equipment info\n\nReturns:\n- (MywFeature|undefined): updated cable feature or undefined if no update",
    "truncateLine": "Async: false\n\nShortens a line by trimming coordinates from the start and/or end.\n\nParameters:\n- `coords` (Array<Array<number>>): Coordinates of the line\n- `startTruncDist` (number|null): Distance to trim from start (or null)\n- `endTruncDist` (number|null): Distance to trim from end (or null)\n\nReturns:\n- (Array<Array<number>>): truncated line coordinates",
    "handleConnect": "Async: true\n\nHandles a connection event by moving the cable endpoint and firing update events.\n\nParameters:\n- `event` (Object): The connection event object",
    "fixCableSegmentChain": "Async: true\n\nFixes the segment chain of a cable using its placement geometry.\n\nParameters:\n- `cable` (MywFeature): The cable feature to fix",
    "fixCable": "Async: true\n\nCreates new cable segments based on route and copies segment data; deletes old segments.\n\nParameters:\n- `cable` (MywFeature): The cable feature to fix\n\nReturns:\n- (Promise): resolving after fix completes",
    "rippleStrandInfo": "Async: true\n\nWrapper for ds.comms.rippleStrandInfo used by the strandInfo dialog.\n\nParameters:\n- `feature` (MywFeature): Feature to ripple strand info on\n- `direction` (string): Direction of ripple\n- `sourceRanges` (Array): Source ranges for ripple\n- `strandInfoToRipple` (Object): Strand info to apply",

    "setInTickMark_desc": "Select a cable segment by clicking on it in the map, set the tickMark, spacing, and unit, then click `Execute`.\nThe function call and its output (the new tick value of the 'in' side of the segment); otherwise 'undefined') will be shown in the browser's development console.",
    "isCable_desc": "Select a feature by clicking on it in the map then click `Execute`.\nThe function call and its output (true if the selected feature is a Cable, false otherwise) will be shown in the browser's development console."
}
