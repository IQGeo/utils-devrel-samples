{
  "freePinsOn": "Async: true\n\nReturns list of pins on side of feature that are not connected\n\nParameters:\n- `feature` (MywFeature): Feature to check\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `side` (string): Side to check: 'in' or 'out'\n\nReturns:\n- (Promise<Array<Object>>): of free pins",
  "usedPinsOn": "Async: true\n\nReturns list of pins on side of feature that are connected\n\nParameters:\n- `feature` (MywFeature): Feature to check\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `side` (string): Side to check: 'in' or 'out'\n\nReturns:\n- (Promise<Array<Object>>): of used pins",
  "highPinUsedOn": "Async: true\n\nReturns the highest pin in use on the side of the feature\n\nParameters:\n- `feature` (MywFeature): Feature to check\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `side` (string): Side to check: 'in' or 'out'\n\nReturns:\n- (Promise<number>): pin number in use",
  "pinStateFor": "Async: true\n\nreturns list of state of pins on the side of the feature\n\nParameters:\n- `feature` (MywFeature): Feature to check\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `side` (string): Side to check: 'in' or 'out'\n\nReturns:\n- (Promise<Array<boolean>>): of pins states, keyed by pin number (true means free, false means connected)",
  "pinCountFor": "Async: true\n\nReturns number of pins (if any) on the side of the feature\n\nParameters:\n- `feature` (MywFeature): Feature to check\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `side` (string): Side to check: 'in' or 'out'\n\nReturns:\n- (Promise<number>): of pins on feature",
  "traceOut": "Async: true\n\nPerform network trace starting on the pin range of the feature\n\nParameters:\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `feature` (MywFeature): Feature to start trace from\n- `pins` (PinRange): Range of pins on feature to start from\n- `direction` (string): Direction to perform the trace: 'upstream', 'downstream' or 'both'\n- `maxDist` (number): Maximum distance to trace\n\nReturns:\n- (Promise<Object>): object containing the trace results",
  "connect": "Async: true\n\nConnect two sets of pins. Raises the event 'connected'\n\nParameters:\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `fromFeature` (MywFeature): Feature where the connection starts\n- `fromPins` (PinRange|Array<Object>): Pins on the fromFeature to connect. It can be a Vector of the form [side,low,high] or a PinRange object\n- `toFeature` (MywFeature): Feature where the connection ends\n- `toPins` (PinRange|Array<Object>): Pins on the toFeature to connect. It can be a Vector of the form [side,low,high] or a PinRange object\n- `toFeature` (MywFeature): Feature where the connection ends\n- `housing` (MywFeature): Feature where the connection is housed\n- `ripple` (boolean): If true, ripples line of count information in both directions\n\nReturns:\n- (Promise<Object>): record created",
  "disconnect": "Async: true\n\nDisconnect a set pins of a feature. Raises the event 'disconnected'\n\nParameters:\n- `tech` (string): Type (e.g.: 'fiber' or 'copper')\n- `feature` (MywFeature): Feature where the connection starts\n- `pins` (PinRange|Array<Object>): Pins on the feature to disconnect. It can be a Vector of the form [side,low,high] or a PinRange object\n- `ripple` (boolean): If true, ripples line of count information in both directions\n\nReturns:\n- (Promise<Object>): request result",
  "moveConns": "Async: true\n\nMove fiber connection records to new housing and root housing\n\nParameters:\n- `conns` (Array<string>): Array of fiber connection urns\n- `housingUrn` (string): URN of the conections new housing\n- `rootHousingUrn` (string): URN of the conections new root housing\n\nReturns:\n- (Promise<Object>): result",
  "switchConnSides": "Async: true\n\nSwitch the sides of connections of a feature\n\nParameters:\n- `feature` (MywFeature): Feature to check\n\nReturns:\n- (Promise<Object>): result",
  "techFor": "Async: false\n\nDetermines the tech for a feature on a side\n\nParameters:\n- `feature` (MywFeature): Feature to check\n- `side` (string): Side to check: 'in' or 'out'\n\nReturns:\n- (string): tech type of the side",
  "fixConnectionSegments": "Async: true\n\nFix a connection which has become invalid after a split due to in_object or out_object segments being adjusted.\n\nParameters:\n- `conn` (MywFeature): Connection to fix",
  "_fixConnectionSegmentsSide": "Async: true\n\nFix the in or out side of a connection which has become invalid after a split of a cable\n\nParameters:\n- `conn` (MywFeature): Connection to fix\n- `side` (string): Side to fix: 'in' or 'out'\n\nReturns:\n- (Promise<Object>): result",
  "isConnection": "Async: false\n\nCheck if a feature is a connection\n\nParameters:\n- `feature` (MywFeature): Feature to check\n\nReturns:\n- (boolean): if the feature is a connection"
}